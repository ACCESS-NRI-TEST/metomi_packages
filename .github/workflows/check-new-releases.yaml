name: Check new releases
# Check new releases of the packages inside the `packages/` directory from MOSRS.
# If any package has a new release, it will trigger the `release-package.yaml` workflow.
# There is a chain of dependency between shumlib, mule and ants. Therefore among these three, any 
# new ants release should wait for any new mule release, that should wait for any new shumlib release.

on:
  workflow_dispatch:
  # schedule:
  #     - cron: '30 2 15 * *'
  # Run the 15th of each month at (2:30am England / MOSRS time)

jobs:
  # Check new releases for all packages in the 'packages/' directory
  # for them can be checked at the same time
  check-new-release-shumlib-ugants:
    name: Check release
    runs-on: ubuntu-latest
    needs: get-packages
    outputs:
      version: ${{ steps.get-release.outputs.version }}
      revision: ${{ steps.get-release.outputs.revision }}
    env:
      GH_TOKEN: ${{github.token}}
    permissions:
      actions: write
      contents: read
    strategy:
      matrix:
          package: ${{fromJson(needs.get-packages.outputs.packages)}}      
    steps:
        - name: Checkout source
          uses: actions/checkout@v4
          with:
            fetch-tags: true
            fetch-depth: 0

        - name: Get ${{matrix.package}} latest release from MOSRS
          id: get-release
          run: |
            # Get the latest release from ${{matrix.package}}'s repository on MOSRS
            echo "Checking latest release for ${{matrix.package}} on MOSRS ..."
            # Get package URL from 'svn_url' field of conda recipe (trimming the '/trunk' part)
            package_url=$(dirname $(grep -Po '^\s*svn_url:\s*\K.*' packages/${{matrix.package}}/meta.yaml))
            # Get latest release from MOSRS (only those in a CalVer format --> YYYY.MM.MINOR = REV)
            latest_release=$(svn propget fcm:revision $package_url \
            --username=${{secrets.MOSRS_USERNAME}} --password=${{secrets.MOSRS_PASSWORD}} \
            | grep -Po '^\d{4}\.\d{2}.\d+\s*=\s*\d*' | tail -n1)
            if [ -z "$latest_release" ]; then
              echo "No release found for ${{matrix.package}} on MOSRS."
              exit 1
            else
              echo "Found ${{matrix.package}}'s latest release on MOSRS: \"$latest_release\"."
              # Extract version from the latest release
              version=$(cut -d'=' -f1 <<< $latest_release | xargs)
              # Extract revision from the latest release
              revision=$(cut -d'=' -f2 <<< $latest_release | xargs)
              echo "version=$version" >> $GITHUB_OUTPUT
              echo "revision=$revision" >> $GITHUB_OUTPUT
            fi

        - name: Check ${{matrix.package}} latest release
          env:
            VERSION: ${{ steps.get-release.outputs.version }}
            REVISION: ${{ steps.get-release.outputs.revision }}
          run: |
            # Check if package latest release on MOSRS is already present in this repo.
            if [ -z $(git tag -l ${{matrix.package}}-${{env.VERSION}}) ]; then 
                # If a release is not present, create one.
                echo "\"${{matrix.package}}-${{env.VERSION}}\" release not found."
                echo "Creating \"${{matrix.package}}-${{env.VERSION}}\" release ..."
                cmd="gh workflow run release-package.yaml \
                --field package_name=${{matrix.package}} \
                --field version=${{env.VERSION}} \
                --field revision=${{env.REVISION}} \
                "
                echo "$cmd"
                eval "$cmd"
            else
                # If a release is present don't do anything.
                echo "\"${{matrix.package}}-${{env.VERSION}}\" release already present. Nothing to do."
            fi

- name: Get package version
        id: get-version
        run: |
          # Extract the version from svn property `fcm:revision`
          VERSION=$(bash packages/${{ inputs.package_name }}/get-version.sh ${{ env.REVISION }})
          echo "${{ inputs.package_name }} version: $VERSION"
          # Add VERSION to the environment variables as it's needed by the conda recipe
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      